===============================================================================
Module : rob
===============================================================================
SCORE  LINE   COND   TOGGLE 
 63.81  91.07  60.29  40.07 

Source File(s) : 

/afs/umich.edu/user/r/y/ryanzhu/EECS470-final-project/systemverilog/rob.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE NAME        
 63.81  91.07  60.29  40.07 testbench.r 



-------------------------------------------------------------------------------
Line Coverage for Module : rob

             Line No.   Total   Covered  Percent
TOTAL                       56       51    91.07
ALWAYS            173       17       12    70.59
ALWAYS            208       34       34   100.00
ALWAYS            293        5        5   100.00

172                         always_comb begin
173        1/1                  if (mispred_out1 && mispred_out2) begin
174                             // early branch resolution, need to clear 
175                             // the instructions after the misprediction
176        1/1                      if (head < tail)
177        1/1                          first_mispredicted_rob = (cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in;
178        1/1                      else if (head == tail) begin
179                                     // rob is full
180        0/1     ==>                  if ((cdb1_tag_in >= head && cdb2_tag_in >= head) || (cdb1_tag_in < head && cdb2_tag_in < head)) 
181        0/1     ==>                      first_mispredicted_rob = (cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in;
182                                     else 
183        0/1     ==>                      first_mispredicted_rob = (cdb1_tag_in <= cdb2_tag_in) ? cdb2_tag_in : cdb1_tag_in;
184                                 end
185        1/1                      else if (cdb1_tag_in >= head && cdb2_tag_in >= head)
186        0/1     ==>                  first_mispredicted_rob = (cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in;
187        1/1                      else if (cdb1_tag_in <= tail && cdb2_tag_in <= tail)
188        0/1     ==>                  first_mispredicted_rob = (cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in;
189                                 else
190        1/1                          first_mispredicted_rob = cdb1_tag_in > cdb2_tag_in ? cdb1_tag_in : cdb2_tag_in;
191                             end
192        1/1                  else if (mispred_out1) begin
193        1/1                          first_mispredicted_rob = cdb1_tag_in;
194                             end
195        1/1                  else if (mispred_out2) begin
196        1/1                          first_mispredicted_rob = cdb2_tag_in;
197                             end
198                             else
199                                     // if no mispredict, set first_mispredicted_rob = tail (the next slot which is empty)
200                                     // if a mispredict happens, (mispred_out1 | mispred_out2) indicate a branch mispredict
201                                     // this is useless
202        1/1                          first_mispredicted_rob = tail;
203                         end
204                         assign first_mispredicted_rob_plus1 = (first_mispredicted_rob == `ROB_SIZE-1) ? 0 : (first_mispredicted_rob+1);
205                     
206                         /* Logic determine the dispatch/mispredict/commit/execution_finish of each rob entry*/
207                         always_comb begin
208        1/1                  clear_arr = {(`ROB_SIZE){1'b0}};
209        1/1                  rob_arr = '{
210                                 (`ROB_SIZE) {'{
211                                 {`AR_LEN{1'b0}},
212                                 {`PR_LEN{1'b0}},
213                                 {`PC_LEN{1'b0}},
214                                 {`FU_LEN{1'b0}},
215                                 1'b0,
216                                 1'b0,
217                                 1'b0,
218                                 1'b0
219                             }}};
220                             // When mispredict, squash!!!
221        1/1                  if (first_mispredicted_rob < tail) begin
222                                 // squash from first_mispredicted_rob+1 to tail
223        1/1                      for (int i=0; i<tail; i++) begin
224        2/2                          if (i >= first_mispredicted_rob_plus1) clear_arr[i] = 1;
                        MISSING_ELSE
225                                 end
226                             end 
227        1/1                  else if (first_mispredicted_rob > tail) begin
228        1/1                      for (int i=0; i<tail; i++) begin
229        1/1                          clear_arr[i] = 1;
230                                 end
231        1/1                      if (first_mispredicted_rob != `ROB_SIZE-1) begin
232        1/1                          for (int i=0; i<`ROB_SIZE; i++) begin
233        2/2                              if (i >= first_mispredicted_rob_plus1) clear_arr[i] = 1;
                        MISSING_ELSE
234                                     end
235                                 end
                   ==>  MISSING_ELSE
236        1/1                  end else if (tail == head && (mispred_out1 | mispred_out2)) begin
237                                 // the very first entry mispredict, squash all but the first entry
238        1/1                      clear_arr = {(`ROB_SIZE){1'b1}};
239        1/1                      clear_arr[head] = 1'b0;
240                             end
                        MISSING_ELSE
241                             // dispatch
242        1/1                  if (valid1_in) begin
243        1/1                      if ((mispred_out1 | mispred_out2)) begin
244        1/1                          clear_arr[tail] = 1'b1;
245                                 end
                        MISSING_ELSE
246        1/1                      rob_arr[tail] = '{
247                                     arch_reg1_in,
248                                     phy_reg1_in,
249                                     pc1_in,
250                                     fu1_in,
251                                     pred_taken1_in,                     //pred_taken
252                                     1'b0,                               //branch_rst
253                                     1'b0,                               //done
254                                     1'b1                                //valid
255                                 };
256                             end
                        MISSING_ELSE
257        1/1                  if (valid2_in) begin
258        1/1                      if ((mispred_out1 | mispred_out2)) begin
259        1/1                          clear_arr[tail_plus1] = 1'b1;
260                                 end
                        MISSING_ELSE
261        1/1                      rob_arr[tail_plus1] = '{
262                                     arch_reg2_in,
263                                     phy_reg2_in,
264                                     pc2_in,
265                                     fu2_in,
266                                     pred_taken2_in,                     //pred_taken
267                                     1'b0,                               //branch_rst
268                                     1'b0,                               //done
269                                     1'b1                                //valid
270                                 };
271                             end           
                        MISSING_ELSE
272                             // execution finished
273        1/1                  if (cdb1_valid_in) begin
274        1/1                      rob_arr[cdb1_tag_in].done = 1'b1;
275        1/1                      rob_arr[cdb1_tag_in].branch_rst = cdb1_branch_rst_in;
276                             end
                        MISSING_ELSE
277        1/1                  if (cdb2_valid_in) begin
278        1/1                      rob_arr[cdb2_tag_in].done = 1'b1;
279        1/1                      rob_arr[cdb2_tag_in].branch_rst = cdb2_branch_rst_in;
280                             end
                        MISSING_ELSE
281                             // instruction retire
282        1/1                  if (rob_retire1) begin
283        1/1                      clear_arr[head] = 1;
284                             end
                        MISSING_ELSE
285        1/1                  if (rob_retire2) begin
286        1/1                      clear_arr[head_plus1] = 1;
287                             end
                        MISSING_ELSE
288                         end
289                     
290                     
291                         /* Sequential Logic */
292                         always_ff @(posedge clock) begin
293        1/1                  if (reset) begin
294        1/1                      head <= `SD 0;
295        1/1                      tail <= `SD 0;
296                             end
297                             else begin
298        1/1                      head <= `SD next_head;
299        1/1                      tail <= `SD next_tail;           

-------------------------------------------------------------------------------
Cond Coverage for Module : rob

               Total   Covered  Percent
Conditions         68       41    60.29
Logical            68       41    60.29
Non-Logical         0        0
Event               0        0

 LINE       173
 EXPRESSION (mispred_out1 && mispred_out2)
             ------1-----    ------2-----

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       177
 EXPRESSION ((cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in)
             --------------1-------------

-1- Status
 0  Covered
 1  Not Covered

 LINE       180
 EXPRESSION (((cdb1_tag_in >= head) && (cdb2_tag_in >= head)) || ((cdb1_tag_in < head) && (cdb2_tag_in < head)))
             ------------------------1-----------------------    -----------------------2----------------------

-1- -2- Status
 0   0  Not Covered
 0   1  Not Covered
 1   0  Not Covered

 LINE       180
 SUB-EXPRESSION ((cdb1_tag_in >= head) && (cdb2_tag_in >= head))
                 ----------1----------    ----------2----------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       180
 SUB-EXPRESSION ((cdb1_tag_in < head) && (cdb2_tag_in < head))
                 ----------1---------    ----------2---------

-1- -2- Status
 0   1  Not Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       181
 EXPRESSION ((cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in)
             --------------1-------------

-1- Status
 0  Not Covered
 1  Not Covered

 LINE       183
 EXPRESSION ((cdb1_tag_in <= cdb2_tag_in) ? cdb2_tag_in : cdb1_tag_in)
             --------------1-------------

-1- Status
 0  Not Covered
 1  Not Covered

 LINE       185
 EXPRESSION ((cdb1_tag_in >= head) && (cdb2_tag_in >= head))
             ----------1----------    ----------2----------

-1- -2- Status
 0   1  Not Covered
 1   0  Covered
 1   1  Not Covered

 LINE       186
 EXPRESSION ((cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in)
             --------------1-------------

-1- Status
 0  Not Covered
 1  Not Covered

 LINE       187
 EXPRESSION ((cdb1_tag_in <= tail) && (cdb2_tag_in <= tail))
             ----------1----------    ----------2----------

-1- -2- Status
 0   1  Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       188
 EXPRESSION ((cdb1_tag_in <= cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in)
             --------------1-------------

-1- Status
 0  Not Covered
 1  Not Covered

 LINE       190
 EXPRESSION ((cdb1_tag_in > cdb2_tag_in) ? cdb1_tag_in : cdb2_tag_in)
             -------------1-------------

-1- Status
 0  Not Covered
 1  Covered

 LINE       236
 EXPRESSION ((tail == head) && ((mispred_out1 | mispred_out2)))
             -------1------    ---------------2---------------

-1- -2- Status
 0   1  Not Covered
 1   0  Covered
 1   1  Covered

 LINE       123
 EXPRESSION ((head == (8 - 1)) ? 0 : ((head + 1)))
             --------1--------

-1- Status
 0  Covered
 1  Not Covered

 LINE       124
 EXPRESSION ((head_plus1 == (8 - 1)) ? 0 : ((head_plus1 + 1)))
             -----------1-----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       125
 EXPRESSION ((tail == (8 - 1)) ? 0 : ((tail + 1)))
             --------1--------

-1- Status
 0  Covered
 1  Covered

 LINE       126
 EXPRESSION ((tail_plus1 == (8 - 1)) ? 0 : ((tail_plus1 + 1)))
             -----------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       128
 EXPRESSION (rob_arr_out[tail].valid ? 2'b11 : (rob_arr_out[tail_plus1].valid ? 2'b10 : 2'b0))
             -----------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       128
 SUB-EXPRESSION (rob_arr_out[tail_plus1].valid ? 2'b10 : 2'b0)
                 --------------1--------------

-1- Status
 0  Covered
 1  Covered

 LINE       137
 EXPRESSION (rob_retire1 && rob_arr_out[head_plus1].done)
             -----1-----    --------------2-------------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       156
 EXPRESSION (((mispred_out1 | mispred_out2)) ? first_mispredicted_rob_plus1 : (valid2_in ? tail_plus2 : (valid1_in ? tail_plus1 : tail)))
             ---------------1---------------

-1- Status
 0  Covered
 1  Covered

 LINE       156
 SUB-EXPRESSION (valid2_in ? tail_plus2 : (valid1_in ? tail_plus1 : tail))
                 ----1----

-1- Status
 0  Covered
 1  Covered

 LINE       156
 SUB-EXPRESSION (valid1_in ? tail_plus1 : tail)
                 ----1----

-1- Status
 0  Covered
 1  Covered

 LINE       159
 EXPRESSION (rob_retire2 ? head_plus2 : (rob_retire1 ? head_plus1 : head))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       159
 SUB-EXPRESSION (rob_retire1 ? head_plus1 : head)
                 -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       163
 EXPRESSION ((rob_arr_out[cdb1_tag_in].fu == BRANCH) && ((cdb1_branch_rst_in ^ rob_arr_out[cdb1_tag_in].pred_taken)) && cdb1_valid_in)
             -------------------1-------------------    ------------------------------2-----------------------------    ------3------

-1- -2- -3- Status
 0   1   1  Covered
 1   0   1  Covered
 1   1   0  Covered
 1   1   1  Covered

 LINE       165
 EXPRESSION ((rob_arr_out[cdb2_tag_in].fu == BRANCH) && ((cdb2_branch_rst_in ^ rob_arr_out[cdb2_tag_in].pred_taken)) && cdb2_valid_in)
             -------------------1-------------------    ------------------------------2-----------------------------    ------3------

-1- -2- -3- Status
 0   1   1  Covered
 1   0   1  Not Covered
 1   1   0  Covered
 1   1   1  Covered

 LINE       204
 EXPRESSION ((first_mispredicted_rob == (8 - 1)) ? 0 : ((first_mispredicted_rob + 1)))
             -----------------1-----------------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : rob
                Total Covered Percent 
Totals          52    18      34.62   
Total Bits      584   234     40.07   
Total Bits 0->1 292   125     42.81   
Total Bits 1->0 292   109     37.33   

                              
Ports          37  15  40.54  
Port Bits      444 158 35.59  
Port Bits 0->1 222 85  38.29  
Port Bits 1->0 222 73  32.88  

                               
Signals          15  3  20.00  
Signal Bits      140 76 54.29  
Signal Bits 0->1 70  40 57.14  
Signal Bits 1->0 70  36 51.43  

Port Details
                           Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                      Yes    Yes         Yes         INPUT     
reset                      No     Yes         No          INPUT     
valid1_in                  Yes    Yes         Yes         INPUT     
valid2_in                  Yes    Yes         Yes         INPUT     
arch_reg1_in[3:0]          Yes    Yes         Yes         INPUT     
arch_reg1_in[4]            No     No          Yes         INPUT     
arch_reg2_in[2:0]          Yes    Yes         Yes         INPUT     
arch_reg2_in[4:3]          No     No          Yes         INPUT     
phy_reg1_in[2:0]           Yes    Yes         Yes         INPUT     
phy_reg1_in[4:3]           No     No          No          INPUT     
phy_reg1_in[5]             No     No          Yes         INPUT     
phy_reg2_in[3:0]           Yes    Yes         Yes         INPUT     
phy_reg2_in[4]             No     No          Yes         INPUT     
phy_reg2_in[5]             No     No          No          INPUT     
pc1_in[4:0]                Yes    Yes         Yes         INPUT     
pc1_in[7:5]                No     No          Yes         INPUT     
pc1_in[31:8]               No     No          No          INPUT     
pc2_in[4:0]                Yes    Yes         Yes         INPUT     
pc2_in[7:5]                No     No          Yes         INPUT     
pc2_in[31:8]               No     No          No          INPUT     
fu1_in[0]                  No     No          Yes         INPUT     
fu1_in[1]                  Yes    Yes         Yes         INPUT     
fu1_in[2]                  No     No          No          INPUT     
fu2_in[1:0]                Yes    Yes         Yes         INPUT     
fu2_in[2]                  No     No          No          INPUT     
pred_taken1_in             Yes    Yes         Yes         INPUT     
pred_taken2_in             Yes    Yes         Yes         INPUT     
cdb1_valid_in              Yes    Yes         Yes         INPUT     
cdb2_valid_in              Yes    Yes         Yes         INPUT     
cdb1_tag_in[2:0]           Yes    Yes         Yes         INPUT     
cdb1_tag_in[4:3]           No     No          No          INPUT     
cdb2_tag_in[2:0]           Yes    Yes         Yes         INPUT     
cdb2_tag_in[4:3]           No     No          No          INPUT     
cdb1_branch_rst_in         Yes    Yes         Yes         INPUT     
cdb2_branch_rst_in         Yes    Yes         Yes         INPUT     
mispred_out1               Yes    Yes         Yes         OUTPUT    
mispred_out2               Yes    Yes         Yes         OUTPUT    
full[1:0]                  Yes    Yes         Yes         OUTPUT    
tail_out[2:0]              Yes    Yes         Yes         OUTPUT    
tail_out[4:3]              No     No          No          OUTPUT    
head_out[1:0]              Yes    Yes         Yes         OUTPUT    
head_out[2]                No     No          Yes         OUTPUT    
head_out[4:3]              No     No          No          OUTPUT    
retire_pkt_1.retire_valid  Yes    Yes         Yes         OUTPUT    
retire_pkt_1.branch_rst    Yes    Yes         Yes         OUTPUT    
retire_pkt_1.fu[1:0]       Yes    Yes         Yes         OUTPUT    
retire_pkt_1.fu[2]         No     No          No          OUTPUT    
retire_pkt_1.pc[1:0]       Yes    Yes         Yes         OUTPUT    
retire_pkt_1.pc[31:2]      No     No          No          OUTPUT    
retire_pkt_1.phy_reg[2:0]  Yes    Yes         Yes         OUTPUT    
retire_pkt_1.phy_reg[5:3]  No     No          No          OUTPUT    
retire_pkt_1.arch_reg[1:0] Yes    Yes         Yes         OUTPUT    
retire_pkt_1.arch_reg[4:2] No     No          No          OUTPUT    
retire_pkt_2.retire_valid  Yes    Yes         Yes         OUTPUT    
retire_pkt_2.branch_rst    No     No          No          OUTPUT    
retire_pkt_2.fu[1:0]       Yes    Yes         Yes         OUTPUT    
retire_pkt_2.fu[2]         No     No          No          OUTPUT    
retire_pkt_2.pc[1:0]       Yes    Yes         Yes         OUTPUT    
retire_pkt_2.pc[31:2]      No     No          No          OUTPUT    
retire_pkt_2.phy_reg[2:0]  Yes    Yes         Yes         OUTPUT    
retire_pkt_2.phy_reg[5:3]  No     No          No          OUTPUT    
retire_pkt_2.arch_reg[1:0] Yes    Yes         Yes         OUTPUT    
retire_pkt_2.arch_reg[4:2] No     No          No          OUTPUT    

Signal Details
                                  Toggle Toggle 1->0 Toggle 0->1 
head[1:0]                         Yes    Yes         Yes         
head[2]                           No     No          Yes         
head[4:3]                         No     No          No          
tail[2:0]                         Yes    Yes         Yes         
tail[4:3]                         No     No          No          
next_head[1:0]                    Yes    Yes         Yes         
next_head[2]                      No     No          Yes         
next_head[4:3]                    No     No          No          
next_tail[2:0]                    Yes    Yes         Yes         
next_tail[4:3]                    No     No          No          
head_plus1[1:0]                   Yes    Yes         Yes         
head_plus1[2]                     No     No          Yes         
head_plus1[4:3]                   No     No          No          
head_plus2[1:0]                   Yes    Yes         Yes         
head_plus2[2]                     No     No          Yes         
head_plus2[4:3]                   No     No          No          
tail_plus1[2:0]                   Yes    Yes         Yes         
tail_plus1[4:3]                   No     No          No          
tail_plus2[2:0]                   Yes    Yes         Yes         
tail_plus2[4:3]                   No     No          No          
rob_retire1                       Yes    Yes         Yes         
rob_retire2                       Yes    Yes         Yes         
first_mispredicted_rob[2:0]       Yes    Yes         Yes         
first_mispredicted_rob[4:3]       No     No          No          
first_mispredicted_rob_plus1[2:0] Yes    Yes         Yes         
first_mispredicted_rob_plus1[4:3] No     No          No          
clear_arr[7:0]                    Yes    Yes         Yes         
insert_position1[4:0]             No     No          No          
insert_position2[4:0]             No     No          No          


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 63.81  91.07  60.29  40.07 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 67.32  96.63  67.59  37.73 


Module : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 rob  


Parent : 

SCORE  LINE   COND   TOGGLE NAME      
 64.51  93.18 --      35.84 testbench 


Subtrees :

SCORE  LINE   COND   TOGGLE NAME        
 72.75 100.00  80.00  38.24 rob_body[0] 
 73.40 100.00  80.00  40.20 rob_body[1] 
 77.67 100.00 100.00  33.01 rob_body[2] 
 74.49 100.00  80.00  43.46 rob_body[3] 
 70.57 100.00  80.00  31.70 rob_body[4] 
 71.66 100.00  80.00  34.97 rob_body[5] 
 72.53 100.00  80.00  37.58 rob_body[6] 
 62.57  89.47  60.00  38.24 rob_body[7] 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : testbench
===============================================================================
SCORE  LINE   COND   TOGGLE 
 64.51  93.18 --      35.84 

Source File(s) : 

/afs/umich.edu/user/r/y/ryanzhu/EECS470-final-project/systemverilog/rob_testsbench.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE NAME      
 64.51  93.18 --      35.84 testbench 



-------------------------------------------------------------------------------
Line Coverage for Module : testbench

             Line No.   Total   Covered  Percent
TOTAL                      484      451    93.18
ALWAYS             41        2        2   100.00
ROUTINE            55       41        9    21.95
ROUTINE           117       18       17    94.44
INITIAL           162      423      423   100.00

40                          always begin
41         2/2                  #5 clock=~clock;
42                          end
43                      
44                          task check_rob_entry;
45                              input ROB_ENTRY_PACKET rob_entry;
46                              input correct_valid;
47                              input [`PC_LEN-1:0] correct_pc;
48                              input [`FU_LEN-1:0] correct_fu;
49                              input correct_pred_taken;
50                              input [`AR_LEN-1:0] correct_arg;
51                              input [`PR_LEN-1:0] correct_prg;
52                              input correct_done;
53                              input correct_brst;
54                              begin
55         1/1                      if (rob_entry.valid != correct_valid) begin
56         0/1     ==>                  $display("@@@ Incorrect at time %4.0f", $time);
57         0/1     ==>                  $display("@@@ The valid bit of rob_entry is not correct! Wanted: %d, get: %d", correct_valid, rob_entry.valid);
58         0/1     ==>                  $display("Test Failed!");
59         0/1     ==>                  $finish;
60                                  end
61         1/1                      else if (correct_valid != 0) begin
62         1/1                          if (rob_entry.pc != correct_pc) begin
63         0/1     ==>                  $display("@@@ Incorrect at time %4.0f", $time);
64         0/1     ==>                  $display("@@@ The pc of rob_entry is not correct! Wanted: %d, get: %d", correct_pc, rob_entry.pc);
65         0/1     ==>                  $display("Test Failed!");
66         0/1     ==>                  $finish;
67                                      end
                        MISSING_ELSE
68         1/1                          if (rob_entry.fu != correct_fu) begin
69         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
70         0/1     ==>                      $display("@@@ The fu of rob_entry is not correct! Wanted: %d, get: %d", correct_fu, rob_entry.fu);
71         0/1     ==>                      $display("Test Failed!");
72         0/1     ==>                      $finish;
73                                      end
                        MISSING_ELSE
74         1/1                          if (rob_entry.pred_taken != correct_pred_taken) begin
75         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
76         0/1     ==>                      $display("@@@ The predict bit of rob_entry is not correct! Wanted: %d, get: %d", correct_pred_taken, rob_entry.pred_taken);
77         0/1     ==>                      $display("Test Failed!");
78         0/1     ==>                      $finish;
79                                      end
                        MISSING_ELSE
80         1/1                          if (rob_entry.arch_reg != correct_arg) begin
81         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
82         0/1     ==>                      $display("@@@ The arch reg of rob_entry is not correct! Wanted: %d, get: %d", correct_arg, rob_entry.arch_reg);
83         0/1     ==>                      $display("Test Failed!");
84         0/1     ==>                      $finish;
85                                      end  
                        MISSING_ELSE
86         1/1                          if (rob_entry.phy_reg != correct_prg) begin
87         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
88         0/1     ==>                      $display("@@@ The phy reg of rob_entry is not correct! Wanted: %d, get: %d", correct_prg, rob_entry.phy_reg);
89         0/1     ==>                      $display("Test Failed!");
90         0/1     ==>                      $finish;
91                                      end  
                        MISSING_ELSE
92         1/1                          if (rob_entry.done != correct_done) begin
93         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
94         0/1     ==>                      $display("@@@ The done bit of rob_entry is not correct! Wanted: %d, get: %d", correct_done, rob_entry.done);
95         0/1     ==>                      $display("Test Failed!");
96         0/1     ==>                      $finish;
97                                      end      
                        MISSING_ELSE
98         1/1                          if (rob_entry.branch_rst != correct_brst) begin
99         0/1     ==>                      $display("@@@ Incorrect at time %4.0f", $time);
100        0/1     ==>                      $display("@@@ The branch_result of rob_entry is not correct! Wanted: %d, get: %d", correct_brst, rob_entry.branch_rst);
101        0/1     ==>                      $display("Test Failed!");
102        0/1     ==>                      $finish;
103                                     end
                        MISSING_ELSE
104                                 end              
                        MISSING_ELSE
105                             end
106                         endtask
107                     
108                         task show_rob_entries;
109                                 input ROB_ENTRY_PACKET [`ROB_SIZE-1:0] rob_arr;
110                                 input [1:0] full;
111                                 input [`ROB_LEN-1:0] head;
112                                 input [`ROB_LEN-1:0] tail;
113                                 input [10:0] cycle_num;
114                                 begin
115                                     // $display("head is at %d", head);
116                                     // $display("head is valid? %d", rob_arr[head].valid);
117        1/1                          $display("@@@\t\tCycle %d", cycle_num);
118        1/1                          $display("@@@\t\tROB#\t\tPC\t\tFU\t\tPRED_TAKEN\t\tARG#\t\tPRG#\t\tDONE\t\tBRRST");
119        1/1                          for (int i = 0; i < `ROB_SIZE; i++) begin
120        1/1                              if (rob_arr[i].valid) begin
121        1/1                                  if (head == i && head == tail) begin
122        1/1                                      $display("@@@\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\tHEAD,TAIL", 
123                                                 i, rob_arr[i].pc, rob_arr[i].fu, rob_arr[i].pred_taken,
124                                                 rob_arr[i].arch_reg, rob_arr[i].phy_reg, rob_arr[i].done,
125                                                 rob_arr[i].branch_rst);
126                                             end
127        1/1                                  else if (head == i) begin
128                                                 // $display("@@@ Head is at %d", head);
129        1/1                                      $display("@@@\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\tHEAD", 
130                                                 i, rob_arr[i].pc, rob_arr[i].fu, rob_arr[i].pred_taken,
131                                                 rob_arr[i].arch_reg, rob_arr[i].phy_reg, rob_arr[i].done,
132                                                 rob_arr[i].branch_rst);
133        1/1                                  end else if (tail == i) begin
134        0/1     ==>                              $display("@@@\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\tTAIL", 
135                                                 i, rob_arr[i].pc, rob_arr[i].fu, rob_arr[i].pred_taken,
136                                                 rob_arr[i].arch_reg, rob_arr[i].phy_reg, rob_arr[i].done,
137                                                 rob_arr[i].branch_rst);
138                                             end else begin
139        1/1                                      $display("@@@\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d", 
140                                                 i, rob_arr[i].pc, rob_arr[i].fu, rob_arr[i].pred_taken,
141                                                 rob_arr[i].arch_reg, rob_arr[i].phy_reg, rob_arr[i].done,
142                                                 rob_arr[i].branch_rst);
143                                             end
144                                         end else begin
145        1/1                                  if (head == tail && i == head) begin
146        1/1                                      $display("@@@\t\t%d\t\t\t\t\t\t\t\t\t\t\t\t\t\tHEAD,TAIL", i);
147        1/1                                  end else if (i == tail) begin
148        1/1                                      $display("@@@\t\t%d\t\t\t\t\t\t\t\t\t\t\t\t\t\tTAIL", i);
149                                             end else begin
150        1/1                                      $display("@@@\t\t%d", i);
151                                             end
152                                         end
153                                     end
154        1/1                          $display("@@@\t\tfull: %d", full);
155        1/1                          $display("@@@");
156                                 end
157                             endtask  // show_rob_entries
158                     
159                         initial
160                         begin
161                             // Initiate to all zero except reset
162        1/1                  cnt = 0;
163        1/1                  clock = 0;
164        1/1                  reset = 1;
165        1/1                  valid1_in = 0;
166        1/1                  valid2_in = 0;
167        1/1                  arch_reg1_in = 0;
168        1/1                  arch_reg2_in = 0;
169        1/1                  phy_reg1_in = 0; 
170        1/1                  phy_reg2_in = 0;
171        1/1                  pc1_in = 0; 
172        1/1                  pc2_in = 0;
173        1/1                  fu1_in = 0;
174        1/1                  fu2_in = 0;
175        1/1                  pred_taken1_in = 0;
176        1/1                  pred_taken2_in = 0;
177        1/1                  cdb1_valid_in = 0;
178        1/1                  cdb2_valid_in = 0;
179        1/1                  cdb1_tag_in = 0;
180        1/1                  cdb2_tag_in = 0;
181        1/1                  cdb1_branch_rst_in = 0;
182        1/1                  cdb2_branch_rst_in = 0;
183        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
184        1/1                  @(negedge clock)
185                             // cycle 1
186        1/1                  cnt=cnt+1;
187        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
188                             assert (head_out == 0 && tail_out == 0) 
189                             else begin  
190                                 $error("Something wrong with HEAD/TAIL!");
191                                 $finish;
192                             end
193        1/1                  for (int i=0; i<`ROB_SIZE; i++) begin
194        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
195                             end
196        1/1                  @(negedge clock)
197                             // cycle 2
198                             // No valid dispatch
199        1/1                  cnt=cnt+1;
200        1/1                  reset = 0;
201        1/1                  pc1_in = 1;
202        1/1                  pc2_in = 2;
203        1/1                  arch_reg1_in = 1;
204        1/1                  arch_reg2_in = 2;
205        1/1                  phy_reg1_in = 3; 
206        1/1                  phy_reg2_in = 4;
207        1/1                  fu1_in = 1;
208        1/1                  fu2_in = 2;
209        1/1                  pred_taken1_in = 0;
210        1/1                  pred_taken2_in = 0;
211        1/1                  cdb1_valid_in = 0;
212        1/1                  cdb2_valid_in = 0;
213        1/1                  cdb1_tag_in = 1;
214        1/1                  cdb2_tag_in = 2;
215        1/1                  cdb1_branch_rst_in = 0;
216        1/1                  cdb2_branch_rst_in = 1;
217        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
218                             assert (head_out == 0 && tail_out == 0) 
219                             else begin  
220                                 $error("Something wrong with HEAD/TAIL!");
221                                 $finish;
222                             end
223                             assert (full == 2'b00) 
224                             else begin
225                                 $error("Something wrong with FULL!");
226                                 $finish;
227                             end
228        1/1                  for (int i=0; i<`ROB_SIZE; i++) begin
229        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
230                             end
231        1/1                  @(negedge clock)
232                             // cycle 3
233                             // Only 1 valid dispatch
234        1/1                  cnt=cnt+1;
235        1/1                  valid1_in = 1;
236        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
237                             assert (head_out == 0 && tail_out == 0) 
238                             else begin  
239                                 $error("Something wrong with HEAD/TAIL!");
240                                 $finish;
241                             end   
242                             assert (full == 2'b00) 
243                             else begin
244                                 $error("Something wrong with FULL!");
245                                 $finish;
246                             end   
247        1/1                  for (int i=0; i<`ROB_SIZE; i++) begin
248        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
249                             end
250        1/1                  @(negedge clock)
251                             // cycle 4
252                             // 2 valid dispatch untill full
253        1/1                  cnt=cnt+1;
254        1/1                  valid2_in = 1;
255        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
256        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 0, 0);
257                             assert (head_out == 0 && tail_out == 1) 
258                             else begin  
259                                 $error("Something wrong with HEAD/TAIL!");
260                                 $finish;
261                             end
262                             assert (full == 2'b00) 
263                             else begin
264                                 $error("Something wrong with FULL!");
265                                 $finish;
266                             end       
267        1/1                  for (int i=1; i<`ROB_SIZE; i++) begin
268        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
269                             end
270        1/1                  @(negedge clock)
271                             // cycle 5
272                             // 2 valid dispatch untill full
273        1/1                  cnt=cnt+1;
274        1/1                  pc1_in = 3;
275        1/1                  pc2_in = 4;
276        1/1                  arch_reg1_in = 3;
277        1/1                  arch_reg2_in = 4;
278        1/1                  phy_reg1_in = 5; 
279        1/1                  phy_reg2_in = 6;
280        1/1                  fu1_in = 3;
281        1/1                  fu2_in = 0;
282        1/1                  pred_taken1_in = 0;
283        1/1                  pred_taken2_in = 1;
284        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
285                             assert (head_out == 0 && tail_out == 3) 
286                             else begin  
287                                 $error("Something wrong with HEAD/TAIL!");
288                                 $finish;
289                             end
290                             assert (full == 2'b00) 
291                             else begin
292                                 $error("Something wrong with FULL!");
293                                 $finish;
294                             end
295        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 0, 0);
296        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
297        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 0, 0);
298        1/1                  for (int i=3; i<`ROB_SIZE; i++) begin
299        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
300                             end
301        1/1                  @(negedge clock)
302                             // cycle 6
303                             // 2 valid dispatch untill full
304        1/1                  cnt=cnt+1;
305        1/1                  pc1_in = 5;
306        1/1                  pc2_in = 6;
307        1/1                  arch_reg1_in = 5;
308        1/1                  arch_reg2_in = 6;
309        1/1                  phy_reg1_in = 7; 
310        1/1                  phy_reg2_in = 8;
311        1/1                  fu1_in = 1;
312        1/1                  fu2_in = 3;
313        1/1                  pred_taken1_in = 1;
314        1/1                  pred_taken2_in = 1;
315        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
316                             assert (head_out == 0 && tail_out == 5) 
317                             else begin  
318                                 $error("Something wrong with HEAD/TAIL!");
319                                 $finish;
320                             end
321                             assert (full == 2'b00) 
322                             else begin
323                                 $error("Something wrong with FULL!");
324                                 $finish;
325                             end
326        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 0, 0);
327        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
328        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 0, 0);
329        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 0, 0);
330        1/1                  check_rob_entry(rob_arr[4], 1, 4, 0, 1, 4, 6, 0, 0);
331        1/1                  for (int i=5; i<`ROB_SIZE; i++) begin
332        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
333                             end
334        1/1                  @(negedge clock)
335                             // cycle 7
336                             // 2 cdb_in, 1 mis_pred at ROB# 3
337        1/1                  cnt=cnt+1;
338        1/1                  valid1_in = 0;
339        1/1                  valid2_in = 0;
340        1/1                  cdb1_valid_in = 1;
341        1/1                  cdb2_valid_in = 1;
342        1/1                  cdb1_tag_in = 3;
343        1/1                  cdb2_tag_in = 2;
344        1/1                  cdb1_branch_rst_in = 1;
345        1/1                  cdb2_branch_rst_in = 1;
346        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
347                     
348                             assert (head_out == 0 && tail_out == 7) 
349                             else begin  
350                                 $error("Something wrong with HEAD/TAIL!");
351                                 $finish;
352                             end   
353                             assert (full == 2'b10) 
354                             else begin
355                                 $error("Something wrong with FULL!");
356                                 $finish;
357                             end     
358        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 0, 0);
359        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
360        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 0, 0);
361        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 0, 0);
362        1/1                  check_rob_entry(rob_arr[4], 1, 4, 0, 1, 4, 6, 0, 0);
363        1/1                  check_rob_entry(rob_arr[5], 1, 5, 1, 1, 5, 7, 0, 0);
364        1/1                  check_rob_entry(rob_arr[6], 1, 6, 3, 1, 6, 8, 0, 0);
365        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);
366        1/1                  #1
367                             assert (mispred_out1 | mispred_out2) 
368                             else begin
369                                 $error("Something wrong with mispredict!, got %d %d", mispred_out1, mispred_out2);
370                                 $finish;
371                             end
372                             // 2 valid dispatch, cdb_in at ROB# 0
373        2/2                  @(negedge clock);
374                             // cycle 8
375        1/1                  cnt=cnt+1;
376        1/1                  cdb1_valid_in = 1;
377        1/1                  cdb2_valid_in = 0;
378        1/1                  cdb1_tag_in = 0;
379        1/1                  valid1_in = 1;
380        1/1                  valid2_in = 1;
381        1/1                  pc1_in = 1;
382        1/1                  pc2_in = 2;
383        1/1                  arch_reg1_in = 1;
384        1/1                  arch_reg2_in = 2;
385        1/1                  phy_reg1_in = 1; 
386        1/1                  phy_reg2_in = 2;
387        1/1                  fu1_in = 3;
388        1/1                  fu2_in = 3;
389        1/1                  pred_taken1_in = 0;
390        1/1                  pred_taken2_in = 1;
391        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
392                             assert (head_out == 0 && tail_out == 4) 
393                             else begin  
394                                 $error("Something wrong with HEAD/TAIL!");
395                                 $finish;
396                             end   
397                             assert (full == 2'b00) 
398                             else begin
399                                 $error("Something wrong with FULL!");
400                                 $finish;
401                             end    
402        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 0, 0);
403        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
404        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 1, 0);
405        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 1, 1);
406        1/1                  check_rob_entry(rob_arr[4], 0, 0, 0, 0, 0, 0, 0, 0);
407        1/1                  check_rob_entry(rob_arr[5], 0, 0, 0, 0, 0, 0, 0, 0);
408        1/1                  check_rob_entry(rob_arr[6], 0, 0, 0, 0, 0, 0, 0, 0);
409        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);
410        1/1                  #1
411                             assert (!(mispred_out1 | mispred_out2)) 
412                             else begin
413                                 $error("Something wrong with mispredict!, got %d %d", mispred_out1, mispred_out2);
414                                 $finish;
415                             end
416                             // retire ROB# 0 and 1 valid dispatch
417        1/1                  @(negedge clock)
418                             // cycle 9
419        1/1                  cnt=cnt+1;
420        1/1                  cdb1_valid_in = 0;
421        1/1                  cdb2_valid_in = 0;
422        1/1                  valid1_in = 1;
423        1/1                  valid2_in = 0;
424        1/1                  pc1_in = 1;
425        1/1                  pc2_in = 2;
426        1/1                  arch_reg1_in = 3;
427        1/1                  phy_reg1_in = 3; 
428        1/1                  fu1_in = 3;
429        1/1                  pred_taken1_in = 1;
430        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
431                             assert (head_out == 0 && tail_out == 6) 
432                             else begin  
433                                 $error("Something wrong with HEAD/TAIL!");
434                                 $finish;
435                             end  
436                             assert (full == 2'b00) 
437                             else begin
438                                 $error("Something wrong with FULL!");
439                                 $finish;
440                             end      
441        1/1                  check_rob_entry(rob_arr[0], 1, 1, 1, 0, 1, 3, 1, 0);
442        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
443        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 1, 0);
444        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 1, 1);
445        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
446        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 0, 0);
447        1/1                  check_rob_entry(rob_arr[6], 0, 0, 0, 0, 0, 0, 0, 0);
448        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);       
449        1/1                  @(negedge clock)
450                             // cycle 10
451                             // 2 valid dispatch, 1 cdb_in at ROB# 1
452        1/1                  cnt=cnt+1;
453        1/1                  valid2_in = 1;
454        1/1                  pc2_in = 2;
455        1/1                  arch_reg2_in = 3;
456        1/1                  phy_reg2_in = 3; 
457        1/1                  fu2_in = 3;
458        1/1                  pred_taken2_in = 1;
459        1/1                  cdb1_valid_in = 1;
460        1/1                  cdb1_tag_in = 1;
461        1/1                  cdb2_valid_in = 1;
462        1/1                  cdb2_tag_in = 6;
463        1/1                  cdb2_branch_rst_in = 0;
464        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
465                             assert (head_out == 1 && tail_out == 7) 
466                             else begin  
467                                 $error("Something wrong with HEAD/TAIL!");
468                                 $finish;
469                             end 
470                             assert (full == 2'b00) 
471                             else begin
472                                 $error("Something wrong with FULL!");
473                                 $finish;
474                             end       
475        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
476        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 0, 0);
477        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 1, 0);
478        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 1, 1);
479        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
480        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 0, 0);
481        1/1                  check_rob_entry(rob_arr[6], 1, 1, 3, 1, 3, 3, 0, 0);
482        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);  
483        1/1                  @(negedge clock)
484                             // cycle 11
485                             // retire ROB# 1&2 and 1 valid dispatch
486        1/1                  cnt=cnt+1;
487        1/1                  cdb1_valid_in = 0;
488        1/1                  cdb2_valid_in = 0;
489        1/1                  valid1_in = 1;
490        1/1                  valid2_in = 0;
491        1/1                  pc1_in = 5;
492        1/1                  arch_reg1_in = 3;
493        1/1                  phy_reg1_in = 3; 
494        1/1                  fu1_in = 3;
495        1/1                  pred_taken1_in = 1;
496        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
497                             assert (head_out == 1 && tail_out == 7) 
498                             else begin  
499                                 $error("Something wrong with HEAD/TAIL!");
500                                 $finish;
501                             end   
502                             assert (full == 2'b00) 
503                             else begin
504                                 $error("Something wrong with FULL!");
505                                 $finish;
506                             end     
507        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
508        1/1                  check_rob_entry(rob_arr[1], 1, 1, 1, 0, 1, 3, 1, 0);
509        1/1                  check_rob_entry(rob_arr[2], 1, 2, 2, 0, 2, 4, 1, 0);
510        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 1, 1);
511        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
512        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 0, 0);
513        1/1                  check_rob_entry(rob_arr[6], 1, 1, 3, 1, 3, 3, 1, 0);
514        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0); 
515        1/1                  @(negedge clock)
516                             // cycle 12
517                             // 2 valid dispatch
518        1/1                  cnt=cnt+1;
519        1/1                  valid1_in = 1;
520        1/1                  valid2_in = 1;
521        1/1                  pc1_in = 2;
522        1/1                  pc2_in = 3;
523        1/1                  arch_reg1_in = 4;
524        1/1                  arch_reg2_in = 5;
525        1/1                  phy_reg1_in = 0; 
526        1/1                  phy_reg2_in = 1; 
527        1/1                  fu1_in = 3;
528        1/1                  fu2_in = 3;
529        1/1                  pred_taken1_in = 1;
530        1/1                  pred_taken2_in = 0;
531        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
532                             assert (head_out == 3 && tail_out == 0) 
533                             else begin  
534                                 $error("Something wrong with HEAD/TAIL!");
535                                 $finish;
536                             end    
537                             assert (full == 2'b00) 
538                             else begin
539                                 $error("Something wrong with FULL!");
540                                 $finish;
541                             end    
542        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
543        1/1                  check_rob_entry(rob_arr[1], 0, 0, 0, 0, 0, 0, 0, 0);
544        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
545        1/1                  check_rob_entry(rob_arr[3], 1, 3, 3, 0, 3, 5, 1, 1);
546        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
547        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 0, 0);
548        1/1                  check_rob_entry(rob_arr[6], 1, 1, 3, 1, 3, 3, 1, 0);
549        1/1                  check_rob_entry(rob_arr[7], 1, 5, 3, 1, 3, 3, 0, 0); 
550        1/1                  @(negedge clock)
551                             // cycle 13
552                             // 2 cdb_in, 2 mis_predict
553        1/1                  cnt=cnt+1;
554        1/1                  cdb1_valid_in = 1;
555        1/1                  cdb2_valid_in = 1;
556        1/1                  cdb1_tag_in = 5;
557        1/1                  cdb2_tag_in = 0;
558        1/1                  cdb1_branch_rst_in = 0;
559        1/1                  cdb2_branch_rst_in = 0;
560        1/1                  valid1_in = 0;
561        1/1                  valid2_in = 0;
562        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
563                             assert (head_out == 4 && tail_out == 2) 
564                             else begin  
565                                 $error("Something wrong with HEAD/TAIL!");
566                                 $finish;
567                             end   
568                             assert (full == 2'b00) 
569                             else begin
570                                 $error("Something wrong with FULL!");
571                                 $finish;
572                             end     
573        1/1                  check_rob_entry(rob_arr[0], 1, 2, 3, 1, 4, 0, 0, 0);
574        1/1                  check_rob_entry(rob_arr[1], 1, 3, 3, 0, 5, 1, 0, 0);
575        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
576        1/1                  check_rob_entry(rob_arr[3], 0, 0, 0, 0, 0, 0, 0, 0);
577        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
578        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 0, 0);
579        1/1                  check_rob_entry(rob_arr[6], 1, 1, 3, 1, 3, 3, 1, 0);
580        1/1                  check_rob_entry(rob_arr[7], 1, 5, 3, 1, 3, 3, 0, 0);
581        1/1                  @(negedge clock)
582                             // cycle 14
583                             // check the effect if we have two mispredict in one cycle
584        1/1                  cnt=cnt+1;
585        1/1                  cdb1_valid_in = 0;
586        1/1                  cdb2_valid_in = 0;
587        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
588                             assert (head_out == 4 && tail_out == 6) 
589                             else begin  
590                                 $error("Something wrong with HEAD/TAIL!");
591                                 $finish;
592                             end  
593                             assert (full == 2'b00) 
594                             else begin
595                                 $error("Something wrong with FULL!");
596                                 $finish;
597                             end      
598        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
599        1/1                  check_rob_entry(rob_arr[1], 0, 0, 0, 0, 0, 0, 0, 0);
600        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
601        1/1                  check_rob_entry(rob_arr[3], 0, 0, 0, 0, 0, 0, 0, 0);
602        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
603        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 1, 0);
604        1/1                  check_rob_entry(rob_arr[6], 0, 0, 0, 0, 0, 0, 0, 0);
605        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);      
606        1/1                  @(negedge clock)
607                             // cycle 15
608                             // fill the rob until full
609        1/1                  cnt=cnt+1;
610        1/1                  pc1_in = 199;
611        1/1                  pc2_in = 200;
612        1/1                  valid1_in = 1;
613        1/1                  valid2_in = 1;
614        1/1                  arch_reg1_in = 15;
615        1/1                  arch_reg2_in = 24;
616        1/1                  phy_reg1_in = 33; 
617        1/1                  phy_reg2_in = 30;
618        1/1                  fu1_in = 1;
619        1/1                  fu2_in = 2;
620        1/1                  pred_taken1_in = 0;
621        1/1                  pred_taken2_in = 0;
622        1/1                  cdb1_valid_in = 0;
623        1/1                  cdb2_valid_in = 0;
624        1/1                  cdb1_tag_in = 1;
625        1/1                  cdb2_tag_in = 2;
626        1/1                  cdb1_branch_rst_in = 0;
627        1/1                  cdb2_branch_rst_in = 1; 
628        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
629        1/1                  @(negedge clock)
630                             // cycle 16
631        1/1                  cnt=cnt+1;
632        1/1                  pc1_in = 204;
633        1/1                  pc2_in = 208;
634        1/1                  valid1_in = 1;
635        1/1                  valid2_in = 1;
636        1/1                  arch_reg1_in = 15;
637        1/1                  arch_reg2_in = 24;
638        1/1                  phy_reg1_in = 33; 
639        1/1                  phy_reg2_in = 30;
640        1/1                  fu1_in = 3;
641        1/1                  fu2_in = 0;
642        1/1                  pred_taken1_in = 1;
643        1/1                  pred_taken2_in = 1;
644        1/1                  cdb1_valid_in = 0;
645        1/1                  cdb2_valid_in = 0;
646        1/1                  cdb1_tag_in = 1;
647        1/1                  cdb2_tag_in = 2;
648        1/1                  cdb1_branch_rst_in = 0;
649        1/1                  cdb2_branch_rst_in = 1; 
650                             assert (head_out == 4 && tail_out == 0) 
651                             else begin  
652                                 $error("Something wrong with HEAD/TAIL!");
653                                 $finish;
654                             end  
655                             assert (full == 2'b00) 
656                             else begin
657                                 $error("Something wrong with FULL!");
658                                 $finish;
659                             end      
660        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
661        1/1                  check_rob_entry(rob_arr[1], 0, 0, 0, 0, 0, 0, 0, 0);
662        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
663        1/1                  check_rob_entry(rob_arr[3], 0, 0, 0, 0, 0, 0, 0, 0);
664        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
665        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 1, 0);
666        1/1                  check_rob_entry(rob_arr[6], 1, 199, 1, 0, 15, 33, 0, 0);
667        1/1                  check_rob_entry(rob_arr[7], 1, 200, 2, 0, 24, 30, 0, 0);
668        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
669        1/1                  @(negedge clock)
670                             // cycle 17
671        1/1                  cnt=cnt+1;
672        1/1                  pc1_in = 212;
673        1/1                  pc2_in = 216;
674        1/1                  valid1_in = 1;
675        1/1                  valid2_in = 1;
676        1/1                  arch_reg1_in = 16;
677        1/1                  arch_reg2_in = 25;
678        1/1                  phy_reg1_in = 33; 
679        1/1                  phy_reg2_in = 30;
680        1/1                  fu1_in = 3;
681        1/1                  fu2_in = 3;
682        1/1                  pred_taken1_in = 0;
683        1/1                  pred_taken2_in = 1;
684        1/1                  cdb1_valid_in = 0;
685        1/1                  cdb2_valid_in = 1;
686        1/1                  cdb1_tag_in = 1;
687        1/1                  cdb2_tag_in = 1;
688        1/1                  cdb1_branch_rst_in = 0;
689        1/1                  cdb2_branch_rst_in = 1; 
690                             assert (head_out == 4 && tail_out == 2) 
691                             else begin  
692                                 $error("Something wrong with HEAD/TAIL!");
693                                 $finish;
694                             end  
695                             assert (full == 2'b00) 
696                             else begin
697                                 $error("Something wrong with FULL!");
698                                 $finish;
699                             end      
700        1/1                  check_rob_entry(rob_arr[0], 1, 204, 3, 1, 15, 33, 0, 0);
701        1/1                  check_rob_entry(rob_arr[1], 1, 208, 0, 1, 24, 30, 0, 0);
702        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
703        1/1                  check_rob_entry(rob_arr[3], 0, 0, 0, 0, 0, 0, 0, 0);
704        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
705        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 1, 0);
706        1/1                  check_rob_entry(rob_arr[6], 1, 199, 1, 0, 15, 33, 0, 0);
707        1/1                  check_rob_entry(rob_arr[7], 1, 200, 2, 0, 24, 30, 0, 0);
708        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);
709        1/1                  @(negedge clock)
710                             // cycle 18
711        1/1                  cnt=cnt+1;
712        1/1                  pc1_in = 212;
713        1/1                  pc2_in = 216;
714        1/1                  valid1_in = 0;
715        1/1                  valid2_in = 0;
716        1/1                  arch_reg1_in = 16;
717        1/1                  arch_reg2_in = 25;
718        1/1                  phy_reg1_in = 33; 
719        1/1                  phy_reg2_in = 30;
720        1/1                  fu1_in = 3;
721        1/1                  fu2_in = 3;
722        1/1                  pred_taken1_in = 0;
723        1/1                  pred_taken2_in = 1;
724        1/1                  cdb1_valid_in = 1;
725        1/1                  cdb2_valid_in = 0;
726        1/1                  cdb1_tag_in = 2;
727        1/1                  cdb2_tag_in = 4;
728        1/1                  cdb1_branch_rst_in = 0;
729        1/1                  cdb2_branch_rst_in = 1; 
730                             assert (head_out == 4 && tail_out == 4) 
731                             else begin  
732                                 $error("Something wrong with HEAD/TAIL!");
733                                 $finish;
734                             end  
735                             assert (full == 2'b11) // should be full
736                             else begin
737                                 $error("Something wrong with FULL!");
738                                 $finish;
739                             end 
740        1/1                  check_rob_entry(rob_arr[0], 1, 204, 3, 1, 15, 33, 0, 0);
741        1/1                  check_rob_entry(rob_arr[1], 1, 208, 0, 1, 24, 30, 1, 0);
742        1/1                  check_rob_entry(rob_arr[2], 1, 212, 3, 0, 16, 33, 0, 0);
743        1/1                  check_rob_entry(rob_arr[3], 1, 216, 3, 1, 25, 30, 0, 0);
744        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
745        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 1, 0);
746        1/1                  check_rob_entry(rob_arr[6], 1, 199, 1, 0, 15, 33, 0, 0);
747        1/1                  check_rob_entry(rob_arr[7], 1, 200, 2, 0, 24, 30, 0, 0);
748        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);  
749        1/1                  @(negedge clock)
750                             // cycle 19
751                             // correct prediction
752        1/1                  cnt=cnt+1;
753        1/1                  pc1_in = 228;
754        1/1                  pc2_in = 232;
755        1/1                  valid1_in = 0;
756        1/1                  valid2_in = 0;
757        1/1                  arch_reg1_in = 16;
758        1/1                  arch_reg2_in = 25;
759        1/1                  phy_reg1_in = 33; 
760        1/1                  phy_reg2_in = 30;
761        1/1                  fu1_in = 3;
762        1/1                  fu2_in = 3;
763        1/1                  pred_taken1_in = 0;
764        1/1                  pred_taken2_in = 1;
765        1/1                  cdb1_valid_in = 1;
766        1/1                  cdb2_valid_in = 1;
767        1/1                  cdb1_tag_in = 5;
768        1/1                  cdb2_tag_in = 4;
769        1/1                  cdb1_branch_rst_in = 1;
770        1/1                  cdb2_branch_rst_in = 1; 
771                             assert (head_out == 4 && tail_out == 4) 
772                             else begin  
773                                 $error("Something wrong with HEAD/TAIL!");
774                                 $finish;
775                             end  
776                             assert (full == 2'b11) // should be full
777                             else begin
778                                 $error("Something wrong with FULL!");
779                                 $finish;
780                             end 
781        1/1                  check_rob_entry(rob_arr[0], 1, 204, 3, 1, 15, 33, 0, 0);
782        1/1                  check_rob_entry(rob_arr[1], 1, 208, 0, 1, 24, 30, 1, 0);
783        1/1                  check_rob_entry(rob_arr[2], 1, 212, 3, 0, 16, 33, 1, 0);
784        1/1                  check_rob_entry(rob_arr[3], 1, 216, 3, 1, 25, 30, 0, 0);
785        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 0, 0);
786        1/1                  check_rob_entry(rob_arr[5], 1, 2, 3, 1, 2, 2, 1, 0);
787        1/1                  check_rob_entry(rob_arr[6], 1, 199, 1, 0, 15, 33, 0, 0);
788        1/1                  check_rob_entry(rob_arr[7], 1, 200, 2, 0, 24, 30, 0, 0);
789        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);   
790        1/1                  @(negedge clock)
791                             // cycle 20
792                             // mispredict at HEAD, need to squalsh entire ROB
793        1/1                  cnt=cnt+1;
794        1/1                  cdb1_valid_in = 0;
795        1/1                  cdb2_valid_in = 0;
796        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);  
797                             assert (head_out == 4 && tail_out == 5) 
798                             else begin  
799                                 $error("Something wrong with HEAD/TAIL!");
800                                 $finish;
801                             end  
802                             assert (full == 2'b00) // should not be full
803                             else begin
804                                 $error("Something wrong with FULL!");
805                                 $finish;
806                             end 
807        1/1                  check_rob_entry(rob_arr[0], 0, 0, 0, 0, 0, 0, 0, 0);
808        1/1                  check_rob_entry(rob_arr[1], 0, 0, 0, 0, 0, 0, 0, 0);
809        1/1                  check_rob_entry(rob_arr[2], 0, 0, 0, 0, 0, 0, 0, 0);
810        1/1                  check_rob_entry(rob_arr[3], 0, 0, 0, 0, 0, 0, 0, 0);
811        1/1                  check_rob_entry(rob_arr[4], 1, 1, 3, 0, 1, 1, 1, 1);
812        1/1                  check_rob_entry(rob_arr[5], 0, 0, 0, 0, 0, 0, 0, 0);
813        1/1                  check_rob_entry(rob_arr[6], 0, 0, 0, 0, 0, 0, 0, 0);
814        1/1                  check_rob_entry(rob_arr[7], 0, 0, 0, 0, 0, 0, 0, 0);  
815        1/1                  @(negedge clock)
816                             // cycle 20 
817                             // the only remaining inst retire, rob empty
818        1/1                  cnt=cnt+1;
819        1/1                  show_rob_entries(rob_arr, full, head_out, tail_out, cnt);  
820                             assert (head_out == 5 && tail_out == 5) 
821                             else begin  
822                                 $error("Something wrong with HEAD/TAIL!");
823                                 $finish;
824                             end  
825                             assert (full == 2'b00) // should not be full
826                             else begin
827                                 $error("Something wrong with FULL!");
828                                 $finish;
829                             end 
830        1/1                  for (int i=1; i<`ROB_SIZE; i++) begin
831        1/1                      check_rob_entry(rob_arr[i], 0, 0, 0, 0, 0, 0, 0, 0);
832                             end
833        1/1                  $display("@@@ PASSED!");
834        1/1                  $finish;

-------------------------------------------------------------------------------
Toggle Coverage for Module : testbench
                Total Covered Percent 
Totals          38    15      39.47   
Total Bits      466   167     35.84   
Total Bits 0->1 233   90      38.63   
Total Bits 1->0 233   77      33.05   

                                
Signals          38  15  39.47  
Signal Bits      466 167 35.84  
Signal Bits 0->1 233 90  38.63  
Signal Bits 1->0 233 77  33.05  

Signal Details
                           Toggle Toggle 1->0 Toggle 0->1 
clock                      Yes    Yes         Yes         
reset                      No     Yes         No          
valid1_in                  Yes    Yes         Yes         
valid2_in                  Yes    Yes         Yes         
arch_reg1_in[3:0]          Yes    Yes         Yes         
arch_reg1_in[4]            No     No          Yes         
arch_reg2_in[2:0]          Yes    Yes         Yes         
arch_reg2_in[4:3]          No     No          Yes         
phy_reg1_in[2:0]           Yes    Yes         Yes         
phy_reg1_in[4:3]           No     No          No          
phy_reg1_in[5]             No     No          Yes         
phy_reg2_in[3:0]           Yes    Yes         Yes         
phy_reg2_in[4]             No     No          Yes         
phy_reg2_in[5]             No     No          No          
pc1_in[4:0]                Yes    Yes         Yes         
pc1_in[7:5]                No     No          Yes         
pc1_in[31:8]               No     No          No          
pc2_in[4:0]                Yes    Yes         Yes         
pc2_in[7:5]                No     No          Yes         
pc2_in[31:8]               No     No          No          
fu1_in[0]                  No     No          Yes         
fu1_in[1]                  Yes    Yes         Yes         
fu1_in[2]                  No     No          No          
fu2_in[1:0]                Yes    Yes         Yes         
fu2_in[2]                  No     No          No          
pred_taken1_in             Yes    Yes         Yes         
pred_taken2_in             Yes    Yes         Yes         
cdb1_valid_in              Yes    Yes         Yes         
cdb2_valid_in              Yes    Yes         Yes         
cdb1_tag_in[2:0]           Yes    Yes         Yes         
cdb1_tag_in[4:3]           No     No          No          
cdb2_tag_in[2:0]           Yes    Yes         Yes         
cdb2_tag_in[4:3]           No     No          No          
cdb1_branch_rst_in         Yes    Yes         Yes         
cdb2_branch_rst_in         Yes    Yes         Yes         
mispred_out1               Yes    Yes         Yes         
mispred_out2               Yes    Yes         Yes         
full[1:0]                  Yes    Yes         Yes         
tail_out[2:0]              Yes    Yes         Yes         
tail_out[4:3]              No     No          No          
head_out[1:0]              Yes    Yes         Yes         
head_out[2]                No     No          Yes         
head_out[4:3]              No     No          No          
retire_pkt_1.retire_valid  Yes    Yes         Yes         
retire_pkt_1.branch_rst    Yes    Yes         Yes         
retire_pkt_1.fu[1:0]       Yes    Yes         Yes         
retire_pkt_1.fu[2]         No     No          No          
retire_pkt_1.pc[1:0]       Yes    Yes         Yes         
retire_pkt_1.pc[31:2]      No     No          No          
retire_pkt_1.phy_reg[2:0]  Yes    Yes         Yes         
retire_pkt_1.phy_reg[5:3]  No     No          No          
retire_pkt_1.arch_reg[1:0] Yes    Yes         Yes         
retire_pkt_1.arch_reg[4:2] No     No          No          
retire_pkt_2.retire_valid  Yes    Yes         Yes         
retire_pkt_2.branch_rst    No     No          No          
retire_pkt_2.fu[1:0]       Yes    Yes         Yes         
retire_pkt_2.fu[2]         No     No          No          
retire_pkt_2.pc[1:0]       Yes    Yes         Yes         
retire_pkt_2.pc[31:2]      No     No          No          
retire_pkt_2.phy_reg[2:0]  Yes    Yes         Yes         
retire_pkt_2.phy_reg[5:3]  No     No          No          
retire_pkt_2.arch_reg[1:0] Yes    Yes         Yes         
retire_pkt_2.arch_reg[4:2] No     No          No          
cnt[3:0]                   Yes    Yes         Yes         
cnt[4]                     No     No          Yes         
cnt[10:5]                  No     No          No          


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 64.51  93.18 --      35.84 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 66.43  94.22  67.59  37.48 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 64.51  93.18 --      35.84 testbench 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   COND   TOGGLE NAME 
 67.32  96.63  67.59  37.73 r    



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : rob_entry
===============================================================================
SCORE  LINE   COND   TOGGLE 
 82.90 100.00 100.00  48.69 

Source File(s) : 

/afs/umich.edu/user/r/y/ryanzhu/EECS470-final-project/systemverilog/rob.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE NAME                    
 62.57  89.47  60.00  38.24 testbench.r.rob_body[7] 
 70.57 100.00  80.00  31.70 testbench.r.rob_body[4] 
 71.66 100.00  80.00  34.97 testbench.r.rob_body[5] 
 72.53 100.00  80.00  37.58 testbench.r.rob_body[6] 
 72.75 100.00  80.00  38.24 testbench.r.rob_body[0] 
 73.40 100.00  80.00  40.20 testbench.r.rob_body[1] 
 74.49 100.00  80.00  43.46 testbench.r.rob_body[3] 
 77.67 100.00 100.00  33.01 testbench.r.rob_body[2] 



-------------------------------------------------------------------------------
Line Coverage for Module : rob_entry

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Module : rob_entry

               Total   Covered  Percent
Conditions          5        5   100.00
Logical             5        5   100.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : rob_entry
                Total Covered Percent 
Totals          27    20      74.07   
Total Bits      306   149     48.69   
Total Bits 0->1 153   74      48.37   
Total Bits 1->0 153   75      49.02   

                              
Ports          19  14  73.68  
Port Bits      206 101 49.03  
Port Bits 0->1 103 50  48.54  
Port Bits 1->0 103 51  49.51  

                               
Signals          8   6  75.00  
Signal Bits      100 48 48.00  
Signal Bits 0->1 50  24 48.00  
Signal Bits 1->0 50  24 48.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[4:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[5:0]   Yes    Yes         Yes         INPUT     
packet_in.arch_reg[4:0]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    Yes    Yes         Yes         OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[4:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[5]         No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[5:0]  Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[4:0] Yes    Yes         Yes         OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[4:0] Yes    Yes         Yes         
phy_reg[5:0]  Yes    Yes         Yes         
pc[4:0]       Yes    Yes         Yes         
pc[5]         No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    Yes    Yes         Yes         
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[7]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 62.57  89.47  60.00  38.24 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 62.57  89.47  60.00  38.24 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[7]

             Line No.   Total   Covered  Percent
TOTAL                       19       17    89.47
ALWAYS             40       19       17    89.47

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         0/1     ==>              done        <= `SD 1;
60         0/1     ==>              branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[7]

               Total   Covered  Percent
Conditions          5        3    60.00
Logical             5        3    60.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Not Covered
 1  Not Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[7]
                Total Covered Percent 
Totals          27    9       33.33   
Total Bits      306   117     38.24   
Total Bits 0->1 153   58      37.91   
Total Bits 1->0 153   59      38.56   

                             
Ports          19  7  36.84  
Port Bits      206 81 39.32  
Port Bits 0->1 103 40 38.83  
Port Bits 1->0 103 41 39.81  

                               
Signals          8   2  25.00  
Signal Bits      100 36 36.00  
Signal Bits 0->1 50  18 36.00  
Signal Bits 1->0 50  18 36.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           No     No          No          INPUT     
packet_in.branch_rst     No     No          No          INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[3:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[5:4]        No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[4:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[5]     No     No          No          INPUT     
packet_in.arch_reg[4:0]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          No     No          No          OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[0]         Yes    Yes         Yes         OUTPUT    
packet_out.pc[1]         No     No          No          OUTPUT    
packet_out.pc[3:2]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[5:4]       No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[4:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[5]    No     No          No          OUTPUT    
packet_out.arch_reg[1:0] Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[2]   No     No          No          OUTPUT    
packet_out.arch_reg[4:3] Yes    Yes         Yes         OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[1:0] Yes    Yes         Yes         
arch_reg[2]   No     No          No          
arch_reg[4:3] Yes    Yes         Yes         
phy_reg[4:0]  Yes    Yes         Yes         
phy_reg[5]    No     No          No          
pc[0]         Yes    Yes         Yes         
pc[1]         No     No          No          
pc[3:2]       Yes    Yes         Yes         
pc[5:4]       No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    No     No          No          
done          No     No          No          


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[4]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 70.57 100.00  80.00  31.70 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 70.57 100.00  80.00  31.70 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[4]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[4]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Not Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[4]
                Total Covered Percent 
Totals          27    14      51.85   
Total Bits      306   97      31.70   
Total Bits 0->1 153   48      31.37   
Total Bits 1->0 153   49      32.03   

                             
Ports          19  10 52.63  
Port Bits      206 71 34.47  
Port Bits 0->1 103 35 33.98  
Port Bits 1->0 103 36 34.95  

                               
Signals          8   4  50.00  
Signal Bits      100 26 26.00  
Signal Bits 0->1 50  13 26.00  
Signal Bits 1->0 50  13 26.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[2:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[3]          No     No          No          INPUT     
packet_in.pc[4]          Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[2:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[4:3]   No     No          No          INPUT     
packet_in.phy_reg[5]     Yes    Yes         Yes         INPUT     
packet_in.arch_reg[2:0]  Yes    Yes         Yes         INPUT     
packet_in.arch_reg[3]    No     No          No          INPUT     
packet_in.arch_reg[4]    Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    Yes    Yes         Yes         OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[0]         Yes    Yes         Yes         OUTPUT    
packet_out.pc[1]         No     No          No          OUTPUT    
packet_out.pc[2]         Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:3]      No     No          No          OUTPUT    
packet_out.phy_reg[2:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[5:3]  No     No          No          OUTPUT    
packet_out.arch_reg[0]   Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[1]   No     No          No          OUTPUT    
packet_out.arch_reg[2]   Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[4:3] No     No          No          OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[0]   Yes    Yes         Yes         
arch_reg[1]   No     No          No          
arch_reg[2]   Yes    Yes         Yes         
arch_reg[4:3] No     No          No          
phy_reg[2:0]  Yes    Yes         Yes         
phy_reg[5:3]  No     No          No          
pc[0]         Yes    Yes         Yes         
pc[1]         No     No          No          
pc[2]         Yes    Yes         Yes         
pc[31:3]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    Yes    Yes         Yes         
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[5]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 71.66 100.00  80.00  34.97 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 71.66 100.00  80.00  34.97 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[5]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[5]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Not Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[5]
                Total Covered Percent 
Totals          27    13      48.15   
Total Bits      306   107     34.97   
Total Bits 0->1 153   53      34.64   
Total Bits 1->0 153   54      35.29   

                             
Ports          19  10 52.63  
Port Bits      206 79 38.35  
Port Bits 0->1 103 39 37.86  
Port Bits 1->0 103 40 38.83  

                               
Signals          8   3  37.50  
Signal Bits      100 28 28.00  
Signal Bits 0->1 50  14 28.00  
Signal Bits 1->0 50  14 28.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[4:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[4:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[5]     No     No          No          INPUT     
packet_in.arch_reg[4:0]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[2:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:3]      No     No          No          OUTPUT    
packet_out.phy_reg[2:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[5:3]  No     No          No          OUTPUT    
packet_out.arch_reg[2:0] Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[4:3] No     No          No          OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[2:0] Yes    Yes         Yes         
arch_reg[4:3] No     No          No          
phy_reg[2:0]  Yes    Yes         Yes         
phy_reg[5:3]  No     No          No          
pc[2:0]       Yes    Yes         Yes         
pc[31:3]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    No     No          No          
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[6]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 72.53 100.00  80.00  37.58 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 72.53 100.00  80.00  37.58 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[6]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[6]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Not Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[6]
                Total Covered Percent 
Totals          27    11      40.74   
Total Bits      306   115     37.58   
Total Bits 0->1 153   57      37.25   
Total Bits 1->0 153   58      37.91   

                             
Ports          19  8  42.11  
Port Bits      206 79 38.35  
Port Bits 0->1 103 39 37.86  
Port Bits 1->0 103 40 38.83  

                               
Signals          8   3  37.50  
Signal Bits      100 36 36.00  
Signal Bits 0->1 50  18 36.00  
Signal Bits 1->0 50  18 36.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     No     No          No          INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[2:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[5:3]        No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[3:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[4]     No     No          No          INPUT     
packet_in.phy_reg[5]     Yes    Yes         Yes         INPUT     
packet_in.arch_reg[3:0]  Yes    Yes         Yes         INPUT     
packet_in.arch_reg[4]    No     No          No          INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[2:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[5:3]       No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[1:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[2]    No     No          No          OUTPUT    
packet_out.phy_reg[3]    Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[4]    No     No          No          OUTPUT    
packet_out.phy_reg[5]    Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[3:0] Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[4]   No     No          No          OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[3:0] Yes    Yes         Yes         
arch_reg[4]   No     No          No          
phy_reg[1:0]  Yes    Yes         Yes         
phy_reg[2]    No     No          No          
phy_reg[3]    Yes    Yes         Yes         
phy_reg[4]    No     No          No          
phy_reg[5]    Yes    Yes         Yes         
pc[2:0]       Yes    Yes         Yes         
pc[5:3]       No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    No     No          No          
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[0]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 72.75 100.00  80.00  38.24 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 72.75 100.00  80.00  38.24 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[0]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[0]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Covered
 1  Not Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[0]
                Total Covered Percent 
Totals          27    12      44.44   
Total Bits      306   117     38.24   
Total Bits 0->1 153   58      37.91   
Total Bits 1->0 153   59      38.56   

                             
Ports          19  9  47.37  
Port Bits      206 81 39.32  
Port Bits 0->1 103 40 38.83  
Port Bits 1->0 103 41 39.81  

                               
Signals          8   3  37.50  
Signal Bits      100 36 36.00  
Signal Bits 0->1 50  18 36.00  
Signal Bits 1->0 50  18 36.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[3:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[5:4]        No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[1:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[2]     No     No          No          INPUT     
packet_in.phy_reg[3]     Yes    Yes         Yes         INPUT     
packet_in.phy_reg[4]     No     No          No          INPUT     
packet_in.phy_reg[5]     Yes    Yes         Yes         INPUT     
packet_in.arch_reg[3:0]  Yes    Yes         Yes         INPUT     
packet_in.arch_reg[4]    No     No          No          INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[3:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[5:4]       No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[1:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[4:2]  No     No          No          OUTPUT    
packet_out.phy_reg[5]    Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[3:0] Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[4]   No     No          No          OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[3:0] Yes    Yes         Yes         
arch_reg[4]   No     No          No          
phy_reg[1:0]  Yes    Yes         Yes         
phy_reg[4:2]  No     No          No          
phy_reg[5]    Yes    Yes         Yes         
pc[3:0]       Yes    Yes         Yes         
pc[5:4]       No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    No     No          No          
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[1]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 73.40 100.00  80.00  40.20 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 73.40 100.00  80.00  40.20 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[1]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[1]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Covered
 1  Not Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[1]
                Total Covered Percent 
Totals          27    12      44.44   
Total Bits      306   123     40.20   
Total Bits 0->1 153   61      39.87   
Total Bits 1->0 153   62      40.52   

                             
Ports          19  9  47.37  
Port Bits      206 85 41.26  
Port Bits 0->1 103 42 40.78  
Port Bits 1->0 103 43 41.75  

                               
Signals          8   3  37.50  
Signal Bits      100 38 38.00  
Signal Bits 0->1 50  19 38.00  
Signal Bits 1->0 50  19 38.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[1:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[2]          No     No          No          INPUT     
packet_in.pc[4:3]        Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[4:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[5]     No     No          No          INPUT     
packet_in.arch_reg[0]    Yes    Yes         Yes         INPUT     
packet_in.arch_reg[1]    No     No          No          INPUT     
packet_in.arch_reg[4:2]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[3:2]       No     No          No          OUTPUT    
packet_out.pc[4]         Yes    Yes         Yes         OUTPUT    
packet_out.pc[5]         No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[4:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[5]    No     No          No          OUTPUT    
packet_out.arch_reg[0]   Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[1]   No     No          No          OUTPUT    
packet_out.arch_reg[4:2] Yes    Yes         Yes         OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[0]   Yes    Yes         Yes         
arch_reg[1]   No     No          No          
arch_reg[4:2] Yes    Yes         Yes         
phy_reg[4:0]  Yes    Yes         Yes         
phy_reg[5]    No     No          No          
pc[1:0]       Yes    Yes         Yes         
pc[3:2]       No     No          No          
pc[4]         Yes    Yes         Yes         
pc[5]         No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    No     No          No          
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[3]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 74.49 100.00  80.00  43.46 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 74.49 100.00  80.00  43.46 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[3]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[3]

               Total   Covered  Percent
Conditions          5        4    80.00
Logical             5        4    80.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Not Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[3]
                Total Covered Percent 
Totals          27    15      55.56   
Total Bits      306   133     43.46   
Total Bits 0->1 153   66      43.14   
Total Bits 1->0 153   67      43.79   

                             
Ports          19  11 57.89  
Port Bits      206 91 44.17  
Port Bits 0->1 103 45 43.69  
Port Bits 1->0 103 46 44.66  

                               
Signals          8   4  50.00  
Signal Bits      100 42 42.00  
Signal Bits 0->1 50  21 42.00  
Signal Bits 1->0 50  21 42.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[1:0]        Yes    Yes         Yes         INPUT     
packet_in.pc[2]          No     No          No          INPUT     
packet_in.pc[4:3]        Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[4:0]   Yes    Yes         Yes         INPUT     
packet_in.phy_reg[5]     No     No          No          INPUT     
packet_in.arch_reg[4:0]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    Yes    Yes         Yes         OUTPUT    
packet_out.pred_taken    Yes    Yes         Yes         OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[2]         No     No          No          OUTPUT    
packet_out.pc[4:3]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[5]         No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[4:0]  Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[5]    No     No          No          OUTPUT    
packet_out.arch_reg[1:0] Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[2]   No     No          No          OUTPUT    
packet_out.arch_reg[4:3] Yes    Yes         Yes         OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[1:0] Yes    Yes         Yes         
arch_reg[2]   No     No          No          
arch_reg[4:3] Yes    Yes         Yes         
phy_reg[4:0]  Yes    Yes         Yes         
phy_reg[5]    No     No          No          
pc[1:0]       Yes    Yes         Yes         
pc[2]         No     No          No          
pc[4:3]       Yes    Yes         Yes         
pc[5]         No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    Yes    Yes         Yes         
branch_rst    Yes    Yes         Yes         
done          Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.r.rob_body[2]
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE 
 77.67 100.00 100.00  33.01 


Instance's subtree :

SCORE  LINE   COND   TOGGLE 
 77.67 100.00 100.00  33.01 


Module : 

SCORE  LINE   COND   TOGGLE NAME      
 82.90 100.00 100.00  48.69 rob_entry 


Parent : 

SCORE  LINE   COND   TOGGLE NAME 
 63.81  91.07  60.29  40.07 r    


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : testbench.r.rob_body[2]

             Line No.   Total   Covered  Percent
TOTAL                       19       19   100.00
ALWAYS             40       19       19   100.00

39                          always_ff @(posedge clock) begin
40         1/1                  if (reset || clear) begin
41         1/1                      valid       <= `SD 0;
42         1/1                      arch_reg    <= `SD 0;
43         1/1                      phy_reg     <= `SD 0;
44         1/1                      pc          <= `SD 0;
45         1/1                      fu          <= `SD 0;
46         1/1                      pred_taken  <= `SD 0;
47         1/1                      branch_rst  <= `SD 0;
48         1/1                      done        <= `SD 0;
49                              end 
50         1/1                  else if (packet_in.valid) begin
51         1/1                      valid       <= `SD 1;
52         1/1                      arch_reg    <= `SD packet_in.arch_reg;
53         1/1                      phy_reg     <= `SD packet_in.phy_reg;
54         1/1                      pc          <= `SD packet_in.pc;
55         1/1                      fu          <= `SD packet_in.fu;
56         1/1                      pred_taken  <= `SD packet_in.pred_taken;
57                              end
58         1/1                  else if (packet_in.done) begin
59         1/1                      done        <= `SD 1;
60         1/1                      branch_rst  <= `SD ((fu == BRANCH) ? packet_in.branch_rst : 0);
61                              end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Cond Coverage for Instance : testbench.r.rob_body[2]

               Total   Covered  Percent
Conditions          5        5   100.00
Logical             5        5   100.00
Non-Logical         0        0
Event               0        0

 LINE       40
 EXPRESSION (reset || clear)
             --1--    --2--

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       60
 EXPRESSION ((fu == BRANCH) ? packet_in.branch_rst : 0)
             -------1------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Instance : testbench.r.rob_body[2]
                Total Covered Percent 
Totals          27    11      40.74   
Total Bits      306   101     33.01   
Total Bits 0->1 153   50      32.68   
Total Bits 1->0 153   51      33.33   

                             
Ports          19  9  47.37  
Port Bits      206 73 35.44  
Port Bits 0->1 103 36 34.95  
Port Bits 1->0 103 37 35.92  

                               
Signals          8   2  25.00  
Signal Bits      100 28 28.00  
Signal Bits 0->1 50  14 28.00  
Signal Bits 1->0 50  14 28.00  

Port Details
                         Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                    Yes    Yes         Yes         INPUT     
reset                    No     Yes         No          INPUT     
clear                    Yes    Yes         Yes         INPUT     
packet_in.valid          Yes    Yes         Yes         INPUT     
packet_in.done           Yes    Yes         Yes         INPUT     
packet_in.branch_rst     Yes    Yes         Yes         INPUT     
packet_in.pred_taken     Yes    Yes         Yes         INPUT     
packet_in.fu[1:0]        Yes    Yes         Yes         INPUT     
packet_in.fu[2]          No     No          No          INPUT     
packet_in.pc[0]          No     No          No          INPUT     
packet_in.pc[4:1]        Yes    Yes         Yes         INPUT     
packet_in.pc[5]          No     No          No          INPUT     
packet_in.pc[7:6]        Yes    Yes         Yes         INPUT     
packet_in.pc[31:8]       No     No          No          INPUT     
packet_in.phy_reg[0]     Yes    Yes         Yes         INPUT     
packet_in.phy_reg[1]     No     No          No          INPUT     
packet_in.phy_reg[2]     Yes    Yes         Yes         INPUT     
packet_in.phy_reg[4:3]   No     No          No          INPUT     
packet_in.phy_reg[5]     Yes    Yes         Yes         INPUT     
packet_in.arch_reg[4:0]  Yes    Yes         Yes         INPUT     
packet_out.valid         Yes    Yes         Yes         OUTPUT    
packet_out.done          Yes    Yes         Yes         OUTPUT    
packet_out.branch_rst    No     No          No          OUTPUT    
packet_out.pred_taken    No     No          No          OUTPUT    
packet_out.fu[1:0]       Yes    Yes         Yes         OUTPUT    
packet_out.fu[2]         No     No          No          OUTPUT    
packet_out.pc[0]         No     No          No          OUTPUT    
packet_out.pc[2:1]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[3]         No     No          No          OUTPUT    
packet_out.pc[4]         Yes    Yes         Yes         OUTPUT    
packet_out.pc[5]         No     No          No          OUTPUT    
packet_out.pc[7:6]       Yes    Yes         Yes         OUTPUT    
packet_out.pc[31:8]      No     No          No          OUTPUT    
packet_out.phy_reg[0]    Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[1]    No     No          No          OUTPUT    
packet_out.phy_reg[2]    Yes    Yes         Yes         OUTPUT    
packet_out.phy_reg[4:3]  No     No          No          OUTPUT    
packet_out.phy_reg[5]    Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[0]   No     No          No          OUTPUT    
packet_out.arch_reg[1]   Yes    Yes         Yes         OUTPUT    
packet_out.arch_reg[3:2] No     No          No          OUTPUT    
packet_out.arch_reg[4]   Yes    Yes         Yes         OUTPUT    

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
valid         Yes    Yes         Yes         
arch_reg[0]   No     No          No          
arch_reg[1]   Yes    Yes         Yes         
arch_reg[3:2] No     No          No          
arch_reg[4]   Yes    Yes         Yes         
phy_reg[0]    Yes    Yes         Yes         
phy_reg[1]    No     No          No          
phy_reg[2]    Yes    Yes         Yes         
phy_reg[4:3]  No     No          No          
phy_reg[5]    Yes    Yes         Yes         
pc[0]         No     No          No          
pc[2:1]       Yes    Yes         Yes         
pc[3]         No     No          No          
pc[4]         Yes    Yes         Yes         
pc[5]         No     No          No          
pc[7:6]       Yes    Yes         Yes         
pc[31:8]      No     No          No          
fu[1:0]       Yes    Yes         Yes         
fu[2]         No     No          No          
pred_taken    No     No          No          
branch_rst    No     No          No          
done          Yes    Yes         Yes         


